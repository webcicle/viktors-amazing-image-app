import axios from 'axios';
import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { ChangeEvent, FormEvent, useEffect, useState } from 'react';
import prisma from '../prisma/client';
import styles from '../styles/Home.module.css';
import type { ModdedImage } from './api/image';
import { s3, envVars } from '../aws/s3';
import { GetObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { useRouter } from 'next/router';

const Home: NextPage<{ images: ModdedImage[] }> = ({ images }) => {
	const [file, setFile] = useState<File>();
	const [caption, setCaption] = useState<string>('');
	const [imagesArray, setImagesArray] = useState<ModdedImage[]>(images);
	const { reload } = useRouter();

	const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
		const { name, value, files } = event.currentTarget;
		if (name === 'file' && files) return setFile(files[0]);
		return setCaption(value);
	};

	const submitForm = async (event: FormEvent) => {
		event.preventDefault();
		const data = new FormData();
		data.append('image', file as File);
		data.append('caption', caption);
		const newImage = await axios.post('/api/image', data);
		console.log(newImage);
	};

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<h1>Viktor&apos;s amazing image app</h1>
			<form encType='multipart/form-data' onSubmit={submitForm}>
				<input
					type='file'
					name='file'
					accept='image/*'
					className={styles.inputElement}
					onChange={handleChange}
				/>
				<input
					type='text'
					name='caption'
					className={styles.inputElement}
					placeholder='caption'
					onChange={handleChange}
				/>
				<button type='submit'>Upload</button>
				<div className={styles.imageContainer}>
					{images?.length > 0 ? (
						images.map((image, index) => {
							return (
								<div className={styles.imagePost} key={image.id}>
									<p>
										{image.created.toString().split('T').shift()} {'@ '}
										{image.created.toString().split('T').pop()?.split(':')[0]}:
										{image.created.toString().split('T').pop()?.split(':')[1]}
									</p>
									<div>
										<Image
											src={image.url}
											layout={'responsive'}
											height={500}
											width={500}
											priority={index === 0}
										/>
									</div>
									<p>{image.caption}</p>
								</div>
							);
						})
					) : (
						<p>No images yet</p>
					)}
				</div>
			</form>
		</div>
	);
};

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
	const images = (await prisma.image.findMany({
		orderBy: { created: 'desc' },
	})) as ModdedImage[];

	for (const image of images) {
		const getObjectParams = {
			Bucket: envVars.bucketName,
			Key: image.id,
		};

		const command = new GetObjectCommand(getObjectParams);
		const url = await getSignedUrl(s3, command, {
			expiresIn: 3600,
		});
		image.url = url;
	}

	res.setHeader(
		'Cache-Control',
		'public, s-maxage=10, stale-while-revalidate=59'
	);

	return {
		props: {
			images: JSON.parse(JSON.stringify(images)),
		},
	};
};

export default Home;
