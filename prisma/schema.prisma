generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @unique @default(cuid())
  username     String    @unique @default(uuid())
  alias        String    @default(uuid())
  profileImage String?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  claimed      Boolean   @default(false)
  comments     Comment[]
  dislikes     Dislike[]
  flames       Flame[]
  following    Follows[] @relation("follower")
  followers    Follows[] @relation("following")
  uploads      Image[]
  likes        Like[]
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followingId], map: "Follows_followingId_fkey")
}

model Image {
  id         String    @id @default(cuid())
  caption    String    @db.VarChar(500)
  created    DateTime  @default(now())
  userId     String
  uploadedBy User      @relation(fields: [userId], references: [id])
  comments   Comment[]
  dislikes   Dislike[]
  flames     Flame[]
  likes      Like[]
  tags       Tag[]

  @@index([userId], map: "Image_userId_fkey")
}

model Tag {
  id      String  @id @default(cuid())
  tagName String  @unique
  images  Image[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  imageId   String?
  commentId String?
  type      String
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id])
  image     Image?   @relation(fields: [imageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([commentId], map: "Like_commentId_fkey")
  @@index([imageId], map: "Like_imageId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}

model Dislike {
  id        String   @id @default(cuid())
  userId    String
  imageId   String?
  commentId String?
  type      String
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id])
  image     Image?   @relation(fields: [imageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([commentId], map: "Dislike_commentId_fkey")
  @@index([imageId], map: "Dislike_imageId_fkey")
  @@index([userId], map: "Dislike_userId_fkey")
}

model Comment {
  id        String    @id @default(cuid())
  comment   String
  userId    String
  imageId   String
  createdAt DateTime  @default(now())
  replyToId String?   @unique
  image     Image     @relation(fields: [imageId], references: [id])
  replyTo   Reply?    @relation("replyTo", fields: [replyToId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  dislikes  Dislike[]
  likes     Like[]
  replies   Reply[]   @relation("replies")

  @@index([imageId], map: "Comment_imageId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model Flame {
  id        String   @id @default(cuid())
  imageId   String
  flamerId  String
  createdAt DateTime @default(now())
  flamer    User     @relation(fields: [flamerId], references: [id])
  image     Image    @relation(fields: [imageId], references: [id])

  @@index([flamerId], map: "Flame_flamerId_fkey")
  @@index([imageId], map: "Flame_imageId_fkey")
}

model Reply {
  id             String   @id @default(cuid())
  replyFromId    String
  createdAt      DateTime @default(now())
  replyFrom      Comment  @relation("replies", fields: [replyFromId], references: [id])
  replyToComment Comment? @relation("replyTo")

  @@index([replyFromId], map: "Reply_replyFromId_fkey")
}
